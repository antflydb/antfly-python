openapi: 3.0.3
info:
  version: v1alpha1
  title: Antfly Public API
  description: API for managing the Antfly distributed key-value store and search engine.
  contact:
    name: Antfly
    url: https://github.com/antflydb/antfly
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: api_table
    x-displayName: Table
  - name: api_index
    x-displayName: Index
  - name: User
    x-displayName: User
  - name: Permission
    x-displayName: Permission
paths:
  /query:
    servers:
      - url: /
        description: Main API server
    post:
      summary: Perform a global query
      tags:
        - api_table
      description: >-
        Executes a query across all relevant tables and shards based on the
        query content.
      operationId: globalQuery
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
          application/x-ndjson:
            description: >
              IMPORTANT: The final line of data must end with a newline
              character \n.

              Each newline character may be preceded by a carriage return \r.

              When sending requests to this endpoint the Content-Type header
              should be set to application/x-ndjson.
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponses'
        '400':
          description: Invalid query request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /table:
    servers:
      - url: /
        description: Main API server
    get:
      summary: List all tables
      tags:
        - api_table
      operationId: listTables
      security:
        - BasicAuth: []
      responses:
        '200':
          description: A list of tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table
        schema:
          type: string
    post:
      summary: Create a new table
      tags:
        - api_table
      operationId: createTable
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
      responses:
        '200':
          description: Table created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Drop a table
      tags:
        - api_table
      operationId: dropTable
      security:
        - BasicAuth: []
      responses:
        '204':
          description: Table dropped successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get table details
      tags:
        - api_table
      operationId: getTable
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Table details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableStatus'
        '404':
          $ref: '#/components/responses/NotFound'
  /table/{tableName}/query:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table to query
        schema:
          type: string
    post:
      summary: Query a specific table
      tags:
        - api_table
      operationId: queryTable
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/batch:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table for batch operation
        schema:
          type: string
    post:
      summary: Perform batch inserts and deletes on a table
      tags:
        - api_table
      operationId: batchTableOperations
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
      responses:
        '201':
          description: Batch operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch:
                    type: string
                    example: successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/backup:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table to backup
        schema:
          type: string
    post:
      summary: Backup a table
      tags:
        - api_table
      operationId: backupTable
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupRequest'
      responses:
        '201':
          description: Backup process initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  backup:
                    type: string
                    example: successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/restore:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table to restore into
        schema:
          type: string
    post:
      summary: Restore a table from backup
      tags:
        - api_table
      operationId: restoreTable
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreRequest'
      responses:
        '202':
          description: Restore process triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  restore:
                    type: string
                    example: triggered
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/key/{key}:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table
        schema:
          type: string
      - name: key
        in: path
        required: true
        description: Key of the record to lookup
        schema:
          type: string
    get:
      summary: Lookup a key in a table
      tags:
        - api_table
      operationId: lookupKey
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Record found
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/index:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table
        schema:
          type: string
    get:
      summary: List all indexes for a table
      tags:
        - api_index
      operationId: listIndexes
      security:
        - BasicAuth: []
      responses:
        '200':
          description: A list of indexes for the table
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndexStatus'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /table/{tableName}/index/{indexName}:
    servers:
      - url: /
        description: Main API server
    parameters:
      - name: tableName
        in: path
        required: true
        description: Name of the table
        schema:
          type: string
      - name: indexName
        in: path
        required: true
        description: Name of the index
        schema:
          type: string
    post:
      summary: Add an index to a table
      tags:
        - api_index
      operationId: createIndex
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
      responses:
        '201':
          description: Index added successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Drop an index from a table
      tags:
        - api_index
      operationId: dropIndex
      security:
        - BasicAuth: []
      responses:
        '201':
          description: Index dropped successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get index details
      tags:
        - api_index
      operationId: getIndex
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Index details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexStatus'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /user/{userName}:
    servers:
      - url: /user
        description: User API server
    parameters:
      - $ref: '#/components/parameters/UserNamePathParameter'
    post:
      tags:
        - User
      summary: Create a new user
      description: >-
        Creates a new user with the given username and password. Username in
        path takes precedence.
      operationId: createUser
      requestBody:
        description: User creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request (e.g., invalid input, username/password mismatch)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict (e.g., user already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - User
      summary: Get user details
      description: Retrieves details for a specific user.
      operationId: getUserByName
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request (e.g., username is required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - User
      summary: Delete a user
      description: Deletes a specific user.
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad Request (e.g., username is required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userName}/password:
    servers:
      - url: /user
        description: User API server
    parameters:
      - $ref: '#/components/parameters/UserNamePathParameter'
    put:
      tags:
        - User
      summary: Update user password
      description: Updates the password for a specific user.
      operationId: updateUserPassword
      requestBody:
        description: New password details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Bad Request (e.g., new password empty, username required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userName}/permission:
    servers:
      - url: /user
        description: User API server
    parameters:
      - $ref: '#/components/parameters/UserNamePathParameter'
    get:
      tags:
        - Permission
      summary: Get user permissions
      description: Retrieves all permissions for a specific user.
      operationId: getUserPermissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '400':
          description: Bad Request (e.g., username is required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Permission
      summary: Add permission to user
      description: Adds a new permission to a specific user.
      operationId: addPermissionToUser
      requestBody:
        description: Permission details to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '201':
          description: Permission added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Bad Request (e.g., invalid input, username required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Permission
      summary: Remove permission from user
      description: >-
        Removes a specific permission rule from a user based on resource name
        and type.
      operationId: removePermissionFromUser
      parameters:
        - name: resource
          in: query
          required: true
          description: The name of the resource for the permission to be removed.
          schema:
            type: string
            example: orders_table
        - name: resourceType
          in: query
          required: true
          description: The type of the resource for the permission to be removed.
          schema:
            $ref: '#/components/schemas/ResourceType'
      responses:
        '204':
          description: Permission removed successfully
        '400':
          description: >-
            Bad Request (e.g., missing query parameters, invalid resourceType,
            username required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found or Role not found for the given resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: An error message
      required:
        - error
    ByteRange:
      type: array
      items:
        type: string
        format: byte
      minItems: 2
      maxItems: 2
    ShardConfig:
      type: object
      required:
        - byte_range
      properties:
        byte_range:
          $ref: '#/components/schemas/ByteRange'
    CreateTableRequest:
      type: object
      properties:
        num_shards:
          type: integer
          format: uint
        indexes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CreateIndexRequest'
        schema:
          $ref: '#/components/schemas/TableSchema'
    Table:
      type: object
      required:
        - name
        - shards
        - indexes
      properties:
        name:
          type: string
        indexes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IndexConfig'
        shards:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ShardConfig'
        schema:
          $ref: '#/components/schemas/TableSchema'
    ValueSchema:
      x-go-type-skip-optional-pointer: false
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ValueType'
        schema:
          $ref: '#/components/schemas/DocumentSchema'
          description: |
            For object types, this schema defines the structure of the content.
            For other types, this field is ignored.
    DocumentSchema:
      x-go-type-skip-optional-pointer: false
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ValueSchema'
          description: >
            A map of field names to their value schema (type, defaults,
            configuration etc.).

            This allows for flexible content types per field.

            The key is the field name, and the value is the value type schema.
    TableSchema:
      x-go-type-skip-optional-pointer: false
      type: object
      properties:
        key:
          type: string
        default_type:
          type: string
          description: |
            Default type to use from the document_types.
        document_types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DocumentSchema'
            description: >
              A map of type names to their content schemas.

              The key is the type name, and the value is the schema for that
              document type.

              This allows for flexible content types per field.
    DateRange:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        from:
          type: string
          x-go-type-skip-optional-pointer: false
        to:
          type: string
          x-go-type-skip-optional-pointer: false
    NumericRange:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        from:
          type: number
          format: float
          x-go-type: float64
          x-go-type-skip-optional-pointer: false
        to:
          type: number
          format: float
          x-go-type: float64
          x-go-type-skip-optional-pointer: false
    TermFacetResult:
      type: object
      required:
        - term
        - count
      properties:
        term:
          type: string
        count:
          type: integer
    DateRangeResult:
      allOf:
        - $ref: '#/components/schemas/DateRange'
        - type: object
          properties:
            count:
              type: integer
          required:
            - count
    NumericRangeResult:
      allOf:
        - $ref: '#/components/schemas/NumericRange'
        - type: object
          properties:
            count:
              type: integer
          required:
            - count
    FacetOption:
      type: object
      properties:
        field:
          type: string
        size:
          type: integer
        date_ranges:
          type: array
          items:
            $ref: '#/components/schemas/DateRange'
        numeric_ranges:
          type: array
          items:
            $ref: '#/components/schemas/NumericRange'
    FacetResult:
      type: object
      properties:
        field:
          type: string
        total:
          type: integer
        missing:
          type: integer
        terms:
          type: array
          items:
            $ref: '#/components/schemas/TermFacetResult'
        date_ranges:
          type: array
          items:
            $ref: '#/components/schemas/DateRangeResult'
        numeric_ranges:
          type: array
          items:
            $ref: '#/components/schemas/NumericRangeResult'
    ValueType:
      type: string
      enum:
        - float
        - uint
        - int
        - bool
        - time
        - geopoint
        - geoshape
        - string
        - keyword
        - array
        - object
        - embedding
        - link
        - blob
      description: Field type (e.g., string, int, float)
    IndexConfig:
      type: object
      required:
        - name
        - type
        - config
      properties:
        name:
          type: string
        type:
          type: string
        config:
          type: object
          additionalProperties: true
    IndexStatus:
      allOf:
        - $ref: '#/components/schemas/IndexConfig'
        - type: object
          required:
            - status
            - shard_status
          properties:
            shard_status:
              type: object
              additionalProperties:
                type: object
            status:
              type: object
              additionalProperties: true
    StorageStatus:
      type: object
      properties:
        disk_usage:
          type: integer
          format: uint64
          description: Disk usage in bytes.
        empty:
          type: boolean
          description: Whether the table has received data.
    TableStatus:
      allOf:
        - $ref: '#/components/schemas/Table'
        - type: object
          required:
            - storage_status
          properties:
            storage_status:
              $ref: '#/components/schemas/StorageStatus'
    EmbedderConfig:
      type: object
      required:
        - provider
        - model
      properties:
        provider:
          type: string
        model:
          type: string
        model_provider:
          type: string
        url:
          type: string
          format: uri
    SummarizerConfig:
      type: object
      required:
        - provider
        - model
      properties:
        provider:
          type: string
        model:
          type: string
        model_provider:
          type: string
        url:
          type: string
          format: uri
    CreateIndexRequest:
      type: object
      required:
        - dimension
        - embedder_config
      properties:
        field:
          type: string
        template:
          type: string
        mem_only:
          type: boolean
        dimension:
          type: integer
          minimum: 1
        summarizer_config:
          $ref: '#/components/schemas/SummarizerConfig'
        embedder_config:
          $ref: '#/components/schemas/EmbedderConfig'
    BatchRequest:
      type: object
      properties:
        inserts:
          type: object
          additionalProperties:
            type: object
            description: Key-value pairs for insertion.
        deletes:
          type: array
          items:
            type: string
          description: List of keys to delete.
      example:
        inserts:
          user:123:
            name: John Doe
            email: john@example.com
            age: 30
            tags:
              - customer
              - premium
          user:456:
            name: Jane Smith
            email: jane@example.com
            age: 25
            tags:
              - customer
        deletes:
          - user:789
          - user:old_account
    BackupRequest:
      type: object
      required:
        - backup_id
        - location
      properties:
        backup_id:
          type: string
        location:
          type: string
          description: >-
            Location for the backup (e.g., file:///path/to/backup,
            s3://bucket/path)
    RestoreRequest:
      allOf:
        - $ref: '#/components/schemas/BackupRequest'
    QueryRequest:
      type: object
      properties:
        table:
          type: string
        full_text_search:
          type: object
          additionalProperties: true
          description: Full JSON Bleve search queries
          x-go-type: json.RawMessage
        semantic_search:
          type: string
        indexes:
          type: array
          items:
            type: string
        filter_prefix:
          type: string
          format: byte
        filter_query:
          type: object
          additionalProperties: true
          description: Full JSON Bleve search queries
          x-go-type: json.RawMessage
        exclusion_query:
          type: object
          additionalProperties: true
          description: Full JSON Bleve search queries
          x-go-type: json.RawMessage
        facets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FacetOption'
        embeddings:
          type: object
          additionalProperties:
            type: array
            items:
              type: number
              format: float
        fields:
          type: array
          items:
            type: string
        limit:
          type: integer
          description: Maximum number of results to return or topk for semantic_search.
        offset:
          type: integer
          description: >-
            Number of results to skip for pagination, only available for
            full_text_search queries.
        order_by:
          type: object
          additionalProperties:
            type: boolean
        distance_under:
          x-go-type-skip-optional-pointer: false
          type: number
          format: float
          description: Maximum distance for semantic similarity search.
        distance_over:
          x-go-type-skip-optional-pointer: false
          type: number
          format: float
          description: Minimum distance for semantic similarity search.
        count:
          type: boolean
        reranker:
          $ref: '#/components/schemas/Reranker'
    Reranker:
      x-go-type-skip-optional-pointer: false
      type: object
      required:
        - model
        - provider
      properties:
        field:
          type: string
        template:
          type: string
        model:
          type: string
        provider:
          type: string
        model_provider:
          type: string
        url:
          type: string
          format: uri
    QueryHit:
      type: object
      required:
        - _id
        - _score
      properties:
        _id:
          type: string
          description: ID of the record.
          x-go-name: ID
        _score:
          type: number
          format: float
          x-go-type: float64
          description: Relevance score of the hit.
          x-go-name: score
        _index_scores:
          type: object
          additionalProperties: true
          description: Scores partitioned by index when using RRF search.
          x-go-name: indexScores
        _source:
          type: object
          additionalProperties: true
          x-go-name: source
    QueryHits:
      x-omitempty: false
      x-omitzero: false
      type: object
      description: A list of query hits.
      properties:
        total:
          type: integer
          format: uint64
          description: Total number of hits available.
          x-omitzero: false
        hits:
          x-omitempty: false
          x-omitzero: false
          type: array
          items:
            $ref: '#/components/schemas/QueryHit'
        max_score:
          type: number
          format: float
          x-go-type: float64
          description: Maximum score of the results.
    QueryResponses:
      type: object
      description: Responses from multiple query operations.
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QueryResult'
    QueryResult:
      type: object
      description: Result of a query operation as an array of results and a count.
      required:
        - took
        - status
      properties:
        hits:
          $ref: '#/components/schemas/QueryHits'
        facets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FacetResult'
        took:
          type: integer
          format: int64
          x-go-type: time.Duration
          description: Duration of the query in milliseconds.
        status:
          type: integer
          format: int32
          description: HTTP status code of the query operation.
        error:
          type: string
          description: Error message if the query failed.
    User:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        password_hash:
          type: string
          format: byte
          description: Base64 encoded password hash. Exposing this is a security risk.
          example: JGFyZ29uMm...
      required:
        - username
        - password_hash
    ResourceType:
      type: string
      enum:
        - table
        - user
        - '*'
      description: Type of the resource, e.g., table, user, or global ('*').
      example: table
    PermissionType:
      type: string
      enum:
        - read
        - write
        - admin
      description: Type of permission.
      example: read
    Permission:
      type: object
      properties:
        resource:
          type: string
          description: >-
            Resource name (e.g., table name, target username, or '*' for
            global).
          example: orders_table
        resource_type:
          $ref: '#/components/schemas/ResourceType'
        type:
          $ref: '#/components/schemas/PermissionType'
      required:
        - resource
        - resource_type
        - type
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: >-
            Username for the new user. If provided in the path, this field can
            be omitted or must match the path parameter.
          example: johndoe
        password:
          type: string
          format: password
          example: s3cr3tP@sswOrd
        initial_policies:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          nullable: true
          description: Optional list of initial permissions for the user.
      required:
        - password
    UpdatePasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          format: password
          example: newS3cr3tP@sswOrd
      required:
        - new_password
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: Operation completed successfully
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    UserNamePathParameter:
      name: userName
      in: path
      required: true
      description: The username.
      schema:
        type: string
        example: johndoe
x-tagGroups:
  - name: Antfly Public API
    tags:
      - api_table
      - api_index
  - name: User Management API
    tags:
      - User
      - Permission
